Práce s obrázky
***************

.[perex]
Třída [api:Nette\Utils\Image] je určena pro základní manipulaci s obrázky. Zjednodušuje nejčastější úkony, jako je změna velikosti, oříznutí, doostření nebo spojování více obrázků.

PHP disponuje rozsáhlou knihovnou funkcí pro manipulaci s obrázky. Ale API není příliš příjemné. To by nebyl Nette Framework, aby nepřišel se sexy API.

Instalace:

```shell
composer require nette/utils
```

Všechny příklady předpokládají vytvořený alias:

```php
use Nette\Utils\Image;
```


Vytvoření obázku
================

Vytvoříme nový obrázek, například s rozměry 100×200:

```php
$image = Image::fromBlank(100, 200);
```

Volitelně lze určit barvu pozadí (výchozí je černá):

```php
$image = Image::fromBlank(100, 200, Image::rgb(125, 0, 0));
```

Nebo obrázek načteme ze souboru:

```php
$image = Image::fromFile('nette.jpg');
```

Potřebujete při načtení detekovat formát obrázku? Metoda ho vrátí v druhém parametru:

```php
$image = Image::fromFile('nette.jpg', $type);
// $type bude Image::JPEG, Image::PNG, Image::GIF, Image::WEBP nebo Image::BMP
```


Uložení obrázku
===============

Obrázek lze uložit do souboru:

```php
$image->save('resampled.jpg');
```

Můžeme určit kvalitu komprese v rozsahu 0..100 pro JPEG (výchozí 85) a WEBP (výchozí 80) a 0..9 pro PNG (výchozí 9):

```php
$image->save('resampled.jpg', 80); // JPEG, kvalita 80%
```

Pokud z přípony souboru není zřejmý formát, lze ho stanovit jednou z konstant `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` a `Image::BMP`:

```php
$image->save('resampled.tmp', null, Image::JPEG);
```

Obrázek lze zapsat do proměnné:

```php
$data = $image->toString(Image::JPEG, 80); // JPEG, kvalita 80%
```

nebo poslat přímo do prohlížeče s příslušnou HTTP hlavičkou `Content-Type`:

```php
// odešle jako image/png
$image->send(Image::PNG);
```



Změna velikosti
===============

Častou operací je změna rozměrů obrázku. Akutální rozměry vrací metody `getWidth()` a `getHeight()`.

Ke změně slouží metoda `resize()`. Příklad proporcionální změny velikosti tak, aby nepřesáhl rozměry 500x300 pixelů (buď bude šířka přesně 500 px nebo výška bude přesně 300 px, jeden z rozměrů se dopočítá tak, aby byl zachován poměr stran):

```php
$image->resize(500, 300);
```

Je možné specifikovat jen jeden rozměr a druhý se dopočítá:

```php
$image->resize(500, null); // šířka 500px, výška se dopočítá

$image->resize(null, 300); // šířka se dopočítá, výška 300px
```

Kterýkoliv rozměr je možné uvést i v procentech:

```php
$image->resize('75%', 300); // 75 % × 300px
```

Chování `resize` lze ovlivnit následujícími příznaky:

|---------------------------------------------------------------------------------------
| Příznak                | Popis
|---------------------------------------------------------------------------------------
| `Image::FIT` (výchozí) | výsledné rozměry budou menší nebo rovny požadovaným rozměrům
| `Image::FILL`          | vyplní (a případně přesáhne v jednom rozměru) cílovou plochu
| `Image::EXACT`         | vyplní cílovou plochu a ořízne to, co přesáhne
| `Image::SHRINK_ONLY`   | pouze zmenšování (zabrání roztažení malého obrázku)
| `Image::STRETCH`       | nezachovávat poměr stran


Příznaky se uvádějí jako třetí argument funkce:

```php
$image->resize(500, 300, Image::STRETCH);
```

Příznaky lze kombinovat:

```php
$image->resize(500, 300, Image::SHRINK_ONLY | Image::STRETCH);
```

Obrázky lze vertikálně nebo horizontálně překlopit tak, že jeden z rozměrů (případně oba) uvedeme jako záporné číslo:

```php
$flipped = $image->resize(null, '-100%'); // flip vertical

$flipped = $image->resize('-100%', '-100%'); // rotate 180°

$flipped = $image->resize(-125, 500); // resize & flip horizontal
```

Po zmenšení obrázku je možné vylepšit jeho vzhled jemným doostřením:

```php
$image->sharpen();
```


Oříznutí
========

Pro oříznutí slouží metoda `crop()`:

```php
$image->crop($left, $top, $width, $height);
```

Podobně jako u `resize()` mohou být všechny hodnoty uvedeny v procentech. Procenta u `$left` a `$top` se počítají ze zbylého místa, podobně jako u CSS vlastnosti `background-position`:

```php
$image->crop('100%', '50%', '80%', '80%');
```

[* crop.svg *]


Obrázek lze také oříznout automaticky, např. oříznutí černých okrajů:

```php
$image->cropAuto(IMG_CROP_BLACK);
```

Metoda `cropAuto()` je objektovou náhradou funkce `imagecropauto()`, v [její dokumentaci|https://www.php.net/manual/en/function.imagecropauto] najdete další informace.


Kreslení a úpravy
=================

Můžeš kreslit, můžeš psát, ale listy netrhat.

Jsou vám k dispozici všechny funkce PHP pro práci s obrázky, jako například [imagefilledellipse|https://www.php.net/manual/en/function.imagefilledellipse.php], ale v objektovém hávu:

```php
$image->filledEllipse($cx, $cy, $width, $height, Image::rgb(255, 0, 0, 63));
```

Viz [#Přehled metod].



Spojení více obrázků
====================

Do obrázku lze snadno vložit jiný obrázek:

```php
$logo = Image::fromFile('logo.png');
$blank = Image::fromBlank(320, 240, Image::rgb(52, 132, 210));

// souřadnice lze uvést opět v procentech
$blank->place($logo, '80%', '80%'); // vložíme poblíž pravého dolního rohu
```

Při vkládání se respektuje alphakanál, navíc můžeme ovlivnit průhlednost vkládaného obrázku (vytvoříme tzv. watermark):

```php
$blank->place($image, '80%', '80%', 25); // průhlednost je 25 %
```

Takové API je skutečně radost používat!


Přehled metod
=============

static fromBlank(int $width, int $height, array $color = null): Image .[method]
-------------------------------------------------------------------------------
Vytvoří nový true color obrázek daných rozměrů. Výchozí barva je černá.

static fromFile(string $file, int &$detectedFormat = null): Image .[method]
---------------------------------------------------------------------------
Načte obrázek ze souboru a vrací jeho typ v `$detectedFormat`. Podporované typy jsou `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` a `Image::BMP`.

static fromString(string $s, int &$detectedFormat = null): Image .[method]
--------------------------------------------------------------------------
Načte obrázek z řetezce a vrací jeho typ v `$detectedFormat`. Podporované typy jsou `Image::JPEG`, `Image::PNG`, `Image::GIF`, `Image::WEBP` a `Image::BMP`.

static rgb(int $red, int $green, int $blue, int $transparency = 0): array .[method]
-----------------------------------------------------------------------------------
Vytvoří barvu, kterou lze použít v dalších metodách, jako třeba `ellipse()`, `fill()` atd.

static typeToExtension(int $type): string .[method]{data-version:v3.1.1}
------------------------------------------------------------------------
Vrátí příponu souboru pro danou konstantu `Image::XXX`.

static typeToMimeType(int $type): string .[method]{data-version:v3.1.1}
-----------------------------------------------------------------------
Vrátí mime type pro danou konstantu `Image::XXX`.

affine(array $affine, array $clip = null): Image .[method]
----------------------------------------------------------
Vraťte obrázek obsahující afinně transformovaný obraz src pomocí volitelné oblasti oříznutí. ([více |https://www.php.net/manual/en/function.imageaffine]).

affineMatrixConcat(array $m1, array $m2): array .[method]
---------------------------------------------------------
Vrací zřetězení dvou afinních transformačních matic, což je užitečné, pokud by se na stejný obrázek mělo najednou použít více transformací. ([více |https://www.php.net/manual/en/function.imageaffinematrixconcat])

affineMatrixGet(int $type, mixed $options = null): array .[method]
------------------------------------------------------------------
Vrátí maticovou transformační matici. ([více |https://www.php.net/manual/en/function.imageaffinematrixget])

alphaBlending(bool $on): void .[method]
---------------------------------------
Umožňuje dva různé režimy kreslení na obrazech truecolor. V režimu prolnutí určuje součást alfa kanálu barvy dodávané do všech funkcí kreslení, jako je například `setPixel()`, do jaké míry by měla být umožněna prosvítání základní barvy. Výsledkem je, že gd v tomto bodě automaticky smíchá existující barvu s barvou výkresu a výsledek uloží do obrázku. Výsledný pixel je neprůhledný. V režimu bez prolnutí se barva výkresu zkopíruje doslova s ​​informacemi o alfa kanálu a nahradí cílový pixel. Režim prolnutí není k dispozici při kreslení na paletových obrázcích. ([více |https://www.php.net/manual/en/function.imagealphablending])

antialias(bool $on): void .[method]
-----------------------------------
Aktivujte rychlé kreslení antialiaed metod pro čáry a kabelové polygony. Nepodporuje alfa komponenty. Funguje to pomocí přímé směsi. Funguje pouze u obrazů truecolor.

Použití antialiased primitiv s průhlednou barvou pozadí může skončit s některými neočekávanými výsledky. Metoda prolnutí používá barvu pozadí jako všechny ostatní barvy. Nedostatek podpory alfa komponent neumožňuje antialiasingovou metodu založenou na alfa. ([více |https://www.php.net/manual/en/function.imageantialias])

arc($x, $y, $w, $h, $start, $end, $color): void .[method]
---------------------------------------------------------
Nakreslí oblouk kruhu soustředěný na dané souřadnice. ([více |https://www.php.net/manual/en/function.imagearc])

char(int $font, $x, $y, string $char, $color): void .[method]
-------------------------------------------------------------
Nakreslí první znak `$char` do obrázku s jeho levým horním směrem na `$x`, `$y` (vlevo nahoře je 0, 0) s barvou `$color`. ([více |https://www.php.net/manual/en/function.imagechar])

charUp(int $font, $x, $y, string $char, $color): void .[method]
---------------------------------------------------------------
Nakreslí znak `$char` svisle na určenou souřadnici na daném obrázku. ([více |https://www.php.net/manual/en/function.imagecharup])

colorAllocate($red, $green, $blue): int .[method]
-------------------------------------------------
Vrací identifikátor barvy představující barvu složenou z daných komponent RGB. Musí být volána pro vytvoření každé barvy, která má být použita v obrázku. ([více |https://www.php.net/manual/en/function.imagecolorallocate])

colorAllocateAlpha($red, $green, $blue, $alpha): int .[method]
--------------------------------------------------------------
Chová se stejně jako `colorAllocate()` přidáním parametru průhlednosti `$alpha`. ([více |https://www.php.net/manual/en/function.imagecolorallocatealpha])

colorAt($x, $y): int .[method]
------------------------------
Vrátí index barvy pixelu na určeném místě v obrázku. Pokud je obrazem truecolor, vrátí tato funkce hodnotu RGB tohoto pixelu jako celé číslo. Použijte bitshifting a masking pro přístup k výrazným hodnotám červené, zelené a modré složky: ([více |https://www.php.net/manual/en/function.imagecolorat])

colorClosest($red, $green, $blue): int .[method]
------------------------------------------------
Vrátí index barvy v paletě obrazu, který je „nejblíže“ zadané hodnotě RGB. "Vzdálenost" mezi požadovanou barvou a každou barvou v paletě se vypočítá, jako by hodnoty RGB představovaly body v trojrozměrném prostoru. ([více |https://www.php.net/manual/en/function.imagecolorclosest])

colorClosestAlpha($red, $green, $blue, $alpha): int .[method]
-------------------------------------------------------------
Vrátí index barvy v paletě obrazu, který je „nejblíže“ zadané hodnotě RGB a úrovni `$alpha`. ([více |https://www.php.net/manual/en/function.imagecolorclosestalpha])

colorClosestHWB($red, $green, $blue): int .[method]
---------------------------------------------------
Získejte index barvy, která má odstín, bílou a černou barvu nejblíže dané barvě. ([více |https://www.php.net/manual/en/function.imagecolorclosesthwb])

colorDeallocate($color): void .[method]
---------------------------------------
De-alokuje barvu dříve přidělenou pomocí `colorAllocate()` nebo `colorAllocateAlpha()`. ([více |https://www.php.net/manual/en/function.imagecolordeallocate])

colorExact($red, $green, $blue): int .[method]
----------------------------------------------
Vrátí index zadané barvy v paletě obrázku. ([více |https://www.php.net/manual/en/function.imagecolorexact])

colorExactAlpha($red, $green, $blue, $alpha): int .[method]
-----------------------------------------------------------
Vrátí index zadané barvy + alfa v paletě obrázku. ([více |https://www.php.net/manual/en/function.imagecolorexactalpha])

colorMatch(Image $image2): void .[method]
-----------------------------------------
Přizpůsobí barvy palety verzi obrazu přesněji verzi skutečné barvy. ([více |https://www.php.net/manual/en/function.imagecolormatch])

colorResolve($red, $green, $blue): int .[method]
------------------------------------------------
Vrátí index barev pro požadovanou barvu, buď přesnou barvu, nebo nejbližší možnou alternativu. ([více |https://www.php.net/manual/en/function.imagecolorresolve])

colorResolveAlpha($red, $green, $blue, $alpha): int .[method]
-------------------------------------------------------------
Vrátí index barev pro požadovanou barvu, buď přesnou barvu, nebo nejbližší možnou alternativu. ([více |https://www.php.net/manual/en/function.imagecolorresolvealpha])

colorSet($index, $red, $green, $blue): void .[method]
-----------------------------------------------------
Tím nastavíte zadaný index v paletě na zadanou barvu. To je užitečné pro vytváření efektů podobných záplavám v paletovaných obrazech bez režie provádění skutečné záplavy. ([více |https://www.php.net/manual/en/function.imagecolorset])

colorsForIndex($index): array .[method]
---------------------------------------
Získá barvu určeného indexu. ([více |https://www.php.net/manual/en/function.imagecolorsforindex])

colorsTotal(): int .[method]
----------------------------
Vrátí počet barev v obrazové paletě. ([více |https://www.php.net/manual/en/function.imagecolorstotal])

colorTransparent($color = null): int .[method]
----------------------------------------------
Získá nebo nastaví průhlednou barvu v obrázku. ([více |https://www.php.net/manual/en/function.imagecolortransparent])

convolution(array $matrix, float $div, float $offset): void .[method]
---------------------------------------------------------------------
Aplikuje na obrázek konvoluční matici, používá daný koeficient a offset. ([více |https://www.php.net/manual/en/function.imageconvolution])

.[note]
Vyžaduje přítomnost *Bundled GD extension*, nemusí tedy fungovat všude.

copy(Image $src, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH): void .[method]
--------------------------------------------------------------------------
Zkopíruje část `$src` na snímek začínající na souřadnicích x/y `$srcX`, `$srcY` se šířkou `$srcW` a výškou `$srcH`. Definovaná část bude zkopírována na souřadnice x/y `$dstX` a `$dstY`. ([více |https://www.php.net/manual/en/function.imagecopy])

copyMerge(Image $src, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH, $opacity): void .[method]
-----------------------------------------------------------------------------------------
Zkopíruje část `$src` na snímek začínající na souřadnicích x/y `$srcX`, `$srcY` se šířkou `$srcW` a výškou `$srcH`. Definovaná část bude zkopírována na souřadnice x/y `$dstX` a `$dstY`. ([více |https://www.php.net/manual/en/function.imagecopymerge])

copyMergeGray(Image $src, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH, $opacity): void .[method]
---------------------------------------------------------------------------------------------
Zkopíruje část `$src` na snímek začínající na souřadnicích x/y `$srcX`, `$srcY` se šířkou `$srcW` a výškou `$srcH`. Definovaná část bude zkopírována na souřadnice x/y `$dstX` a `$dstY`.

Tato funkce je identická s `copyMerge()` s tou výjimkou, že při sloučení zachovává odstín zdroje převedením cílových pixelů na šedou stupnici před operací kopírování. ([více |https://www.php.net/manual/en/function.imagecopymergegray])

copyResampled(Image $src, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH): void .[method]
-------------------------------------------------------------------------------------------------
Zkopíruje obdélníkovou část jednoho obrázku na druhý obrázek, hladce interpoluje hodnoty obrazových bodů, takže zejména zmenšení velikosti obrázku si stále zachovává velkou jasnost.

Jinými slovy, `copyResampled()` vezme obdélníkovou oblast od `$src` šířky `$srcW` a výšky `$srcH` v poloze (`$srcX`, `$srcY`) a umístí ji do obdélníkové oblasti obrazu šířky `$dstW` a výška `$dstH` v poloze (`$dstX`, `$dstY`).

Pokud se zdrojové a cílové souřadnice, šířka a výška liší, provede se odpovídající roztažení nebo zmenšení fragmentu obrazu. Souřadnice se vztahují k levému hornímu rohu. Tuto funkci lze použít ke kopírování oblastí ve stejném obrázku, ale pokud se oblasti překrývají, výsledky nebudou předvídatelné. ([více |https://www.php.net/manual/en/function.imagecopyresampled])

copyResized(Image $src, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH): void .[method]
-----------------------------------------------------------------------------------------------
Zkopíruje obdélníkovou část jednoho obrázku na jiný obrázek. Jinými slovy, `copyResized()` získá obdélníkovou oblast od `$src` šířky `$srcW` a výšky `$srcH` v poloze (`$srcX`, `$srcY`) a umístí ji do obdélníkové oblasti obrazu šířky `$dstW` ] a výška `$dstH` v poloze (`$dstX`, `$dstY`).

Pokud se zdrojové a cílové souřadnice, šířka a výška liší, provede se odpovídající roztažení nebo zmenšení fragmentu obrazu. Souřadnice se vztahují k levému hornímu rohu. Tuto funkci lze použít ke kopírování oblastí ve stejném obrázku, ale pokud se oblasti překrývají, výsledky nebudou předvídatelné. ([více |https://www.php.net/manual/en/function.imagecopyresized])

crop(int|string $left, int|string $top, int|string $width, int|string $height): Image .[method]
-----------------------------------------------------------------------------------------------
Ořízne obrázek do dané obdélníkové oblasti. Rozměry je možné zadávat jako integery v pixelech nebo řetězce v procentech (např. `'50%'`).

cropAuto(int $mode = -1, float $threshold = .5, int $color = -1): Image .[method]
---------------------------------------------------------------------------------
Automaticky ořízne snímek podle daného `$mode`. ([více |https://www.php.net/manual/en/function.imagecropauto])

ellipse($cx, $cy, $w, $h, $color): void .[method]
-------------------------------------------------
Nakreslí elipsu vystředěnou na zadané souřadnice. ([více |https://www.php.net/manual/en/function.imageellipse])

fill($x, $y, $color): void .[method]
------------------------------------
Provádí záplavovou výplň počínaje danou souřadnicí (vlevo nahoře je 0, 0) s daným `$color` na obrázku. ([více |https://www.php.net/manual/en/function.imagefill])

filledArc($cx, $cy, $w, $h, $s, $e, $color, $style): void .[method]
-------------------------------------------------------------------
Nakreslí částečný oblouk vystředěný na zadané souřadnici v obrázku. ([více |https://www.php.net/manual/en/function.imagefilledarc])

filledEllipse($cx, $cy, $w, $h, $color): void .[method]
-------------------------------------------------------
Nakreslí elipsu vystředěnou na zadané souřadnici v obrázku. ([více |https://www.php.net/manual/en/function.imagefilledellipse])

filledPolygon(array $points, $numPoints, $color): void .[method]
----------------------------------------------------------------
Vytvoří v obrazu $ vyplněný mnohoúhelník. ([více |https://www.php.net/manual/en/function.imagefilledpolygon])

filledRectangle($x1, $y1, $x2, $y2, $color): void .[method]
-----------------------------------------------------------
Vytvoří obdélník vyplněný `$color` v obrázku počínaje bodem 1 a končící bodem 2. 0, 0 je levý horní roh obrázku. ([více |https://www.php.net/manual/en/function.imagefilledrectangle])

fillToBorder($x, $y, $border, $color): void .[method]
-----------------------------------------------------
Provádí záplavovou výplň, jejíž barva okraje je definována pomocí `$border`. Výchozím bodem výplně je `$x`, `$y` (vlevo nahoře je 0, 0) a oblast je vyplněna barvou `$color`. ([více |https://www.php.net/manual/en/function.imagefilltoborder])

filter($filtertype): void .[method]
-----------------------------------
Použije daný filtr `$filtertype` na obrázek. ([více |https://www.php.net/manual/en/function.imagefilter])

flip(int $mode): void .[method]
-------------------------------
Převrátí snímek pomocí daného `$mode`. ([více |https://www.php.net/manual/en/function.imageflip])

ftText($size, $angle, $x, $y, $col, string $fontFile, string $text, array $extrainfo = null): array .[method]
-------------------------------------------------------------------------------------------------------------
Napište text do obrázku pomocí písem pomocí FreeType 2. ([více |https://www.php.net/manual/en/function.imagefttext])

gammaCorrect(float $inputgamma, float $outputgamma): void .[method]
-------------------------------------------------------------------
Aplikuje gama korekci na obraz vzhledem k vstupnímu a výstupnímu gama. ([více |https://www.php.net/manual/en/function.imagegammacorrect])

getClip(): array .[method]{data-version:PHP 7.2}
------------------------------------------------
Načte aktuální obdélník oříznutí, tj. Oblast, za kterou nebudou nakresleny žádné pixely. ([více |https://www.php.net/manual/en/function.imagegetclip])

getHeight(): int .[method]
--------------------------
Vrátí výšku obrázku.

getImageResource(): resource|GdImage .[method]
----------------------------------------------
Vrací původní resource.

getWidth(): int .[method]
-------------------------
Vrátí šířku obrázku.

interlace($interlace = null): int .[method]
-------------------------------------------
Zapíná nebo vypíná prokládaný bit. Pokud je prokládaný bit nastaven a obraz je použit jako obrázek JPEG, je obraz vytvořen jako progresivní JPEG. ([více |https://www.php.net/manual/en/function.imageinterlace])

isTrueColor(): bool .[method]
-----------------------------
Zjistí, zda je obraz truecolor. ([více |https://www.php.net/manual/en/function.imageistruecolor])

layerEffect($effect): void .[method]
------------------------------------
Nastavte příznak prolnutí alfa tak, aby používal efekty vrstvení. ([více |https://www.php.net/manual/en/function.imagelayereffect])

line($x1, $y1, $x2, $y2, $color): void .[method]
------------------------------------------------
Nakreslí čáru mezi dvěma danými body. ([více |https://www.php.net/manual/en/function.imageline])

openPolygon(array $points, int $numPoints, int $color): void .[method]{data-version:PHP 7.2}
--------------------------------------------------------------------------------------------
Nakreslí na obrázek otevřený mnohoúhelník. Na rozdíl od `polygon()` není mezi posledním a prvním bodem nakreslena žádná čára. ([více |https://www.php.net/manual/en/function.imageopenpolygon])

paletteCopy(Image $source): void .[method]
------------------------------------------
Zkopíruje paletu z `$source` do obrázku. ([více |https://www.php.net/manual/en/function.imagepalettecopy])

paletteToTrueColor(): void .[method]
------------------------------------
Převede obrázek založený na paletě vytvořený funkcemi jako `create()` na skutečný barevný obrázek, například `createtruecolor()`. ([více |https://www.php.net/manual/en/function.imagepalettetotruecolor])

place(Image $image, int|string $left = 0, int|string $top = 0, int $opacity = 100): Image .[method]
---------------------------------------------------------------------------------------------------
Zkopíruje `$image` do obrázku na souřadnice x/y `$left` a `$top`. Souřadnice je možné zadávat jako integery v pixelech nebo řetězce v procentech (např. `'50%'`).

polygon(array $points, $numPoints, $color): void .[method]
----------------------------------------------------------
Vytvoří v obrazu mnohoúhelník. ([více |https://www.php.net/manual/en/function.imagepolygon])

psText(string $text, $font, $size, $color, $backgroundColor, $x, $y, $space = null, $tightness = null, float $angle = null, $antialiasSteps = null): array .[method]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Nakreslí text na obrázek pomocí písem PostScript Type1. ([více |https://www.php.net/manual/en/function.imagepstext])

rectangle($x1, $y1, $x2, $y2, $col): void .[method]
---------------------------------------------------
Vytvoří obdélník začínající zadanými souřadnicemi. ([více |https://www.php.net/manual/en/function.imagerectangle])

resize(int|string $width, int|string $height, int $flags = Image::FIT): Image .[method]
---------------------------------------------------------------------------------------
Změní velikost obrázku, [více informací|#Změna velikosti]. Rozměry je možné zadávat jako integery v pixelech nebo řetězce v procentech (např. `'50%'`).

resolution(int $resX = null, int $resY = null): mixed .[method]{data-version:PHP 7.2}
-------------------------------------------------------------------------------------
Umožňuje nastavit a získat rozlišení obrázku v DPI (tečky na palec). Pokud není zadán žádný z volitelných parametrů, je aktuální rozlišení vráceno jako indexované pole. Pokud je zadáno pouze `$resX`, horizontální a vertikální rozlišení se nastaví na tuto hodnotu. Pokud jsou zadány oba volitelné parametry, horizontální a vertikální rozlišení se nastaví na tyto hodnoty.

Rozlišení se používá pouze jako meta informace, když jsou obrázky čteny a zapisovány do formátů podporujících tento druh informací (aktuálně PNG a JPEG). Nemá to vliv na žádné operace kreslení. Výchozí rozlišení nových snímků je 96 DPI. ([více |https://www.php.net/manual/en/function.imageresolution])

rotate(float $angle, $backgroundColor): Image .[method]
-------------------------------------------------------
Otočí snímek pomocí zadaného `$angle` ve stupních. Střed otáčení je střed obrazu a rotovaný obraz může mít jiné rozměry než původní obraz. ([více |https://www.php.net/manual/en/function.imagerotate])

.[note]
Vyžaduje přítomnost *Bundled GD extension*, nemusí tedy fungovat všude.

save(string $file, int $quality = null, int $type = null): void .[method]
-------------------------------------------------------------------------
Uloží obrázek do souboru.

saveAlpha(bool $saveflag): void .[method]
-----------------------------------------
Nastavuje příznak, který určuje, zda při ukládání obrazů PNG zachovat úplné informace o alfa kanálu (na rozdíl od jednobarevné průhlednosti).

Alfablending musí být deaktivován (`alphaBlending(false)`), aby si alfa kanál udržel na prvním místě. ([více |https://www.php.net/manual/en/function.imagesavealpha])

scale(int $newWidth, int $newHeight = -1, int $mode = IMG_BILINEAR_FIXED): Image .[method]
------------------------------------------------------------------------------------------
Měřítko obrázku pomocí daného interpolačního algoritmu. ([více |https://www.php.net/manual/en/function.imagescale])

send(int $type = Image::JPEG, int $quality = null): void .[method]
------------------------------------------------------------------
Vypíše obrázek do prohlížeče.

setBrush(Image $brush): void .[method]
--------------------------------------
Nastavuje obraz štětce, který se má použít ve všech funkcích kreslení čar (například `line()` a `polygon()`) při kreslení se speciálními barvami IMG_COLOR_BRUSHED nebo IMG_COLOR_STYLEDBRUSHED. ([více |https://www.php.net/manual/en/function.imagesetbrush])

setClip(int $x1, int $y1, int $x2, int $y2): void .[method]{data-version:PHP 7.2}
---------------------------------------------------------------------------------
Nastaví aktuální obdélník oříznutí, tj. Oblast, za kterou nebudou nakresleny žádné pixely. ([více |https://www.php.net/manual/en/function.imagesetclip])

setInterpolation(int $method = IMG_BILINEAR_FIXED): void .[method]
------------------------------------------------------------------
Nastaví metodu interpolace, nastavení metody interpolace ovlivní vykreslování různých funkcí v GD, jako je například funkce `rotate()`. ([více |https://www.php.net/manual/en/function.imagesetinterpolation])

setPixel($x, $y, $color): void .[method]
----------------------------------------
Nakreslí pixel na zadané souřadnici. ([více |https://www.php.net/manual/en/function.imagesetpixel])

setStyle(array $style): void .[method]
--------------------------------------
Nastavuje styl, který mají používat všechny funkce kreslení čar (například `line()` a `polygon()`) při kreslení speciální barvou IMG_COLOR_STYLED nebo linií obrázků s barvou IMG_COLOR_STYLEDBRUSHED. ([více |https://www.php.net/manual/en/function.imagesetstyle])

setThickness($thickness): void .[method]
----------------------------------------
Nastavuje tloušťku čar nakreslených při kreslení obdélníků, mnohoúhelníků, oblouků atd. Na `$thickness` pixelů. ([více |https://www.php.net/manual/en/function.imagesetthickness])

setTile(Image $tile): void .[method]
------------------------------------
Nastaví obrázek dlaždice, který bude použit ve všech funkcích vyplňování regionů (například `fill()` a `filledPolygon()`), když se vyplní speciální barvou IMG_COLOR_TILED.

Dlaždice je obrázek používaný k vyplnění oblasti opakovaným vzorem. Jakýkoli obraz GD lze použít jako dlaždici a nastavením průhledného barevného indexu obrazu dlaždice pomocí `colorTransparent()` lze vytvořit dlaždici, aby mohly projít určité části podkladové oblasti. ([více |https://www.php.net/manual/en/function.imagesettile])

sharpen(): Image .[method]
--------------------------
Doostří obrázek.

.[note]
Vyžaduje přítomnost *Bundled GD extension*, nemusí tedy fungovat všude.

string($font, $x, $y, string $str, $col): void .[method]
--------------------------------------------------------
Nakreslí řetězec na zadané souřadnice. ([více |https://www.php.net/manual/en/function.imagestring])

stringUp($font, $x, $y, string $s, $col): void .[method]
--------------------------------------------------------
Nakreslí řetězec svisle na dané souřadnice. ([více |https://www.php.net/manual/en/function.imagestringup])

toString(int $type = Image::JPEG, int $quality = null): string .[method]
------------------------------------------------------------------------
Uloží obrázek do řetezce.

trueColorToPalette(bool $dither, $ncolors): void .[method]
----------------------------------------------------------
Převede obraz truecolor na obraz palety. Kód pro tuto funkci byl původně vytvořen z kódu knihovny Independent JPEG Group, což je vynikající. Kód byl upraven tak, aby ve výsledné paletě zachoval co nejvíce informací o alfa kanálech, kromě zachování co možná největších barev. Toto nefunguje tak dobře, jak by se dalo doufat. Obvykle je nejlepší namísto toho vytvořit jednoduše barevný výstupní obraz, který zaručuje nejvyšší kvalitu výstupu. ([více |https://www.php.net/manual/en/function.imagetruecolortopalette])

ttfText($size, $angle, $x, $y, $color, string $fontfile, string $text): array .[method]
---------------------------------------------------------------------------------------
Zapíše daný text do obrázku pomocí písem TrueType. ([více |https://www.php.net/manual/en/function.imagettftext])


{{composer: nette/utils}}
