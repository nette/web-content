Práce s obrázky
***************

.[perex]
Třída [Nette\Utils\Image |api:] je určena pro základní manipulaci s obrázky. Zjednodušuje nejčastější úkony, jako je změna velikosti, doostření nebo odeslání do prohlížeče.

Základní manipulace s obrázky, jako je zmenšení, oříznutí nebo doostření, obnáší v PHP psaní nečitelného a nesrozumitelnému kódu. Vyjádřeno velmi diplomaticky :-) A to by nebyl Nette Framework, aby nepřišel s příjemnějším API.

Nejprve obrázek načteme ze souboru:

```php
use Nette\Utils\Image;

$image = Image::fromFile('nette.jpg');
```

nebo vytvoříme obrázek nový, prázdný, s rozměry 100x200:

```php
$image = Image::fromBlank(100, 200);
```

Volitelně lze určit také barvu pozadí (výchozí je černá):

```php
$image = Image::fromBlank(100, 200, Image::rgb(125, 0, 0));
```

A vypíšeme jeho rozměry:

```php
echo "Rozměry jsou $image->width × $image->height";
```




Změna velikosti
---------------

Ke změně velikosti se používá metoda `resize`. První dva parametry určují šířku a výšku, volitelný třetí slouží pro příznaky.

Proporcionální změna velikosti tak, aby nepřesáhl rozměry 50x30 pixelů (buď bude šířka přesně 50 px nebo výška bude přesně 30 px, druhý rozměr se dopočítá tak, aby byl zachován poměr stran):

```php
$image->resize(50, 30);
```

Je možné specifikovat jen jeden rozměr a druhý se dopočítá:

```php
$image->resize(50, null); // šířka 50px, výška se dopočítá

$image->resize(null, 30); // šířka se dopočítá, výška 30px
```

Kterýkoliv rozměr je možné uvést i v procentech:

```php
$image->resize('75%', 30); // 75 % × 30px
```

Chování `resize` lze ovlivnit následujícími příznaky:

|---------------------------------------------------------------------------------------
| Příznak                | Popis
|---------------------------------------------------------------------------------------
| `Image::FIT` (výchozí) | výsledné rozměry budou menší nebo rovny požadovaným rozměrům
| `Image::FILL`          | vyplní (a případně přesáhne v jednom rozměru) cílovou plochu
| `Image::EXACT`         | vyplní cílovou plochu a ořízne to, co přesáhne
| `Image::SHRINK_ONLY`   | pouze zmenšování (zabrání roztažení malého obrázku)
| `Image::STRETCH`       | nezachovávat poměr stran


Příznaky se uvádějí jako třetí argument funkce:

```php
$image->resize(50, 30, Image::STRETCH);
```

Příznaky lze kombinovat:

```php
$image->resize(50, 30, Image::SHRINK_ONLY | Image::STRETCH);
```

Obrázky lze vertikálně nebo horizontálně překlopit tak, že jeden z rozměrů (případně oba) uvedeme jako záporné číslo:

```php
$flipped = $image->resize(null, '-100%'); // flip vertical

$flipped = $image->resize('-100%', '-100%'); // rotate 180°

$flipped = $image->resize(-125, 50); // resize & flip horizontal
```


Úpravy
------

Po zmenšení obrázku je možné vylepšit jeho vzhled jemným doostřením:

```php
$image->sharpen();
```

Obrázek ořízneme dle souřadnic obdélníku:

```php
$image->crop($left, $top, $width, $height);
```


Zmenšený obrázek můžeme vložit do jiného (vytvoříme tzv. watermark):

```php
$blank = Image::fromBlank(320, 240, Image::rgb(52, 132, 210));
$blank->place($image, 0, 0); // vložíme na pozici 0px, 0px

// souřadnice lze uvést opět v procentech
$blank->place($image, '80%', '75%', 25); // průhlednost je 25 %
```

Uložení obrázku
---------------

Obrázek lze uložit do souboru:

```php
$image->save('resampled.jpg');
```

Volitelně lze stanovit i kvalitu a formát obrázku. (Pokud není uveden, detekuje se z přípony):

```php
$image->save('resampled.jpg', 80, Image::JPEG); // JPEG, kvalita 80%
```

Podporovány jsou formáty PNG, GIF, JPEG a WEBP.

Alternativně lze obrázek uložit i do proměnné:

```php
$binary = (string) $image;
```

nebo poslat přímo do prohlížeče s nastavením příslušné hlavičky `Content-Type`:

```php
// odešle jako image/jpeg
$image->send();

// odešle jako image/png
$image->send(Image::PNG);
```

Takové API je skutečně radost používat!


Další funkce
------------

Image zjednodušuje volání všech [grafických funkcí PHP |http://php.net/manual/en/ref.image.php] z rozšíření GD, například [php:imagefilledrectangle], ale s využitím srozumitelnějšího objektového přístupu:

```php
$white = Image::rgb(255, 255, 255);
$image->filledRectangle(0, 0, $width, $height, $white);
```

Překled funkcí:

- <code>void "alphaBlending":[https://www.php.net/manual/en/function.imagealphablending.php](bool $on)</code>
- <code>void "antialias":[https://www.php.net/manual/en/function.imageantialias.php](bool $on)</code>
- <code>void "arc":[https://www.php.net/manual/en/function.imagearc.php]($x, $y, $w, $h, $start, $end, $color)</code>
- <code>void "char":[https://www.php.net/manual/en/function.imagechar.php](int $font, $x, $y, string $char, $color)</code>
- <code>void "charUp":[https://www.php.net/manual/en/function.imagecharup.php](int $font, $x, $y, string $char, $color)</code>
- <code>int "colorAllocate":[https://www.php.net/manual/en/function.imagecolorallocate.php]($red, $green, $blue)</code>
- <code>int "colorAllocateAlpha":[https://www.php.net/manual/en/function.imagecolorallocatealpha.php]($red, $green, $blue, $alpha)</code>
- <code>int "colorAt":[https://www.php.net/manual/en/function.imagecolorat.php]($x, $y)</code>
- <code>int "colorClosest":[https://www.php.net/manual/en/function.imagecolorclosest.php]($red, $green, $blue)</code>
- <code>int "colorClosestAlpha":[https://www.php.net/manual/en/function.imagecolorclosestalpha.php]($red, $green, $blue, $alpha)</code>
- <code>int "colorClosestHWB":[https://www.php.net/manual/en/function.imagecolorclosesthwb.php]($red, $green, $blue)</code>
- <code>void "colorDeallocate":[https://www.php.net/manual/en/function.imagecolordeallocate.php]($color)</code>
- <code>int "colorExact":[https://www.php.net/manual/en/function.imagecolorexact.php]($red, $green, $blue)</code>
- <code>int "colorExactAlpha":[https://www.php.net/manual/en/function.imagecolorexactalpha.php]($red, $green, $blue, $alpha)</code>
- <code>void "colorMatch":[https://www.php.net/manual/en/function.imagecolormatch.php](Image $image2)</code>
- <code>int "colorResolve":[https://www.php.net/manual/en/function.imagecolorresolve.php]($red, $green, $blue)</code>
- <code>int "colorResolveAlpha":[https://www.php.net/manual/en/function.imagecolorresolvealpha.php]($red, $green, $blue, $alpha)</code>
- <code>void "colorSet":[https://www.php.net/manual/en/function.imagecolorset.php]($index, $red, $green, $blue)</code>
- <code>array "colorsForIndex":[https://www.php.net/manual/en/function.imagecolorsforindex.php]($index)</code>
- <code>int "colorsTotal":[https://www.php.net/manual/en/function.imagecolorstotal.php]()</code>
- <code>int "colorTransparent":[https://www.php.net/manual/en/function.imagecolortransparent.php]($color = null)</code>
- <code>void "convolution":[https://www.php.net/manual/en/function.imageconvolution.php](array $matrix, float $div, float $offset)</code>
- <code>void "copy":[https://www.php.net/manual/en/function.imagecopy.php](Image $src, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH)</code>
- <code>void "copyMerge":[https://www.php.net/manual/en/function.imagecopymerge.php](Image $src, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH, $opacity)</code>
- <code>void "copyMergeGray":[https://www.php.net/manual/en/function.imagecopymergegray.php](Image $src, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH, $opacity)</code>
- <code>void "copyResampled":[https://www.php.net/manual/en/function.imagecopyresampled.php](Image $src, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH)</code>
- <code>void "copyResized":[https://www.php.net/manual/en/function.imagecopyresized.php](Image $src, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH)</code>
- <code>Image "cropAuto":[https://www.php.net/manual/en/function.imagecropauto.php](int $mode = -1, float $threshold = .5, int $color = -1)</code>
- <code>void "dashedLine":[https://www.php.net/manual/en/function.imagedashedline.php]($x1, $y1, $x2, $y2, $color)</code>
- <code>void "ellipse":[https://www.php.net/manual/en/function.imageellipse.php]($cx, $cy, $w, $h, $color)</code>
- <code>void "fill":[https://www.php.net/manual/en/function.imagefill.php]($x, $y, $color)</code>
- <code>void "filledArc":[https://www.php.net/manual/en/function.imagefilledarc.php]($cx, $cy, $w, $h, $s, $e, $color, $style)</code>
- <code>void "filledEllipse":[https://www.php.net/manual/en/function.imagefilledellipse.php]($cx, $cy, $w, $h, $color)</code>
- <code>void "filledPolygon":[https://www.php.net/manual/en/function.imagefilledpolygon.php](array $points, $numPoints, $color)</code>
- <code>void "filledRectangle":[https://www.php.net/manual/en/function.imagefilledrectangle.php]($x1, $y1, $x2, $y2, $color)</code>
- <code>void "fillToBorder":[https://www.php.net/manual/en/function.imagefilltoborder.php]($x, $y, $border, $color)</code>
- <code>void "filter":[https://www.php.net/manual/en/function.imagefilter.php]($filtertype)</code>
- <code>void "flip":[https://www.php.net/manual/en/function.imageflip.php](int $mode)</code>
- <code>array "ftText":[https://www.php.net/manual/en/function.imagefttext.php]($size, $angle, $x, $y, $col, string $fontFile, string $text, array $extrainfo = null)</code>
- <code>void "gammaCorrect":[https://www.php.net/manual/en/function.imagegammacorrect.php](float $inputgamma, float $outputgamma)</code>
- <code>int "interlace":[https://www.php.net/manual/en/function.imageinterlace.php]($interlace = null)</code>
- <code>bool "isTrueColor":[https://www.php.net/manual/en/function.imageistruecolor.php]()</code>
- <code>void "layerEffect":[https://www.php.net/manual/en/function.imagelayereffect.php]($effect)</code>
- <code>void "line":[https://www.php.net/manual/en/function.imageline.php]($x1, $y1, $x2, $y2, $color)</code>
- <code>void "paletteCopy":[https://www.php.net/manual/en/function.imagepalettecopy.php](Image $source)</code>
- <code>void "paletteToTrueColor":[https://www.php.net/manual/en/function.imagepalettetotruecolor.php]()</code>
- <code>void "polygon":[https://www.php.net/manual/en/function.imagepolygon.php](array $points, $numPoints, $color)</code>
- <code>array "psText":[https://www.php.net/manual/en/function.imagepstext.php](string $text, $font, $size, $color, $backgroundColor, $x, $y, $space = null, $tightness = null, float $angle = null, $antialiasSteps = null)</code>
- <code>void "rectangle":[https://www.php.net/manual/en/function.imagerectangle.php]($x1, $y1, $x2, $y2, $col)</code>
- <code>Image "rotate":[https://www.php.net/manual/en/function.imagerotate.php](float $angle, $backgroundColor)</code>
- <code>void "saveAlpha":[https://www.php.net/manual/en/function.imagesavealpha.php](bool $saveflag)</code>
- <code>Image "scale":[https://www.php.net/manual/en/function.imagescale.php](int $newWidth, int $newHeight = -1, int $mode = IMG_BILINEAR_FIXED)</code>
- <code>void "setBrush":[https://www.php.net/manual/en/function.imagesetbrush.php](Image $brush)</code>
- <code>void "setPixel":[https://www.php.net/manual/en/function.imagesetpixel.php]($x, $y, $color)</code>
- <code>void "setStyle":[https://www.php.net/manual/en/function.imagesetstyle.php](array $style)</code>
- <code>void "setThickness":[https://www.php.net/manual/en/function.imagesetthickness.php]($thickness)</code>
- <code>void "setTile":[https://www.php.net/manual/en/function.imagesettile.php](Image $tile)</code>
- <code>void "string":[https://www.php.net/manual/en/function.imagestring.php]($font, $x, $y, string $s, $col)</code>
- <code>void "stringUp":[https://www.php.net/manual/en/function.imagestringup.php]($font, $x, $y, string $s, $col)</code>
- <code>void "trueColorToPalette":[https://www.php.net/manual/en/function.imagetruecolortopalette.php](bool $dither, $ncolors)</code>
- <code>array "ttfText":[https://www.php.net/manual/en/function.imagettftext.php]($size, $angle, $x, $y, $color, string $fontfile, string $text)</code>

.[note]
Funkce `sharpen()` a `rotate()` vyžadují přítomnost *Bundled GD extension*, nemusí tedy fungovat všude.


{{composer: nette/utils}}
